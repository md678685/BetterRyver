/* BetterRyver (working name)
 * A Ryver enhancement suite, loosely heavily inspired by BetterDiscord
 */

"use strict";

const _path = require("path");
const _fs = require("fs");

const BetterRyverUI = require("./ui");
const BetterRyverKeybinds = require("./keybinds");

module.exports = class BetterRyverLoader {
    constructor(window) {
        window.betterryver = this;

        this.window = window;
        this.webviews = document.getElementsByTagName("webview");

        this.internalConfig = require("./config.json");
        this.internalConfig.dataDirs = {};
        this.internalConfig.dataFiles = {};

        this.safeMode = this.internalConfig.loader.forceSafeMode;
        this.config = {};

        this.ui = new BetterRyverUI(window);
        this.keybinds = new BetterRyverKeybinds(window);
    }

    init() {
        this.findData();
        this.loadConfig();
        this.injectCSS();
    }

    findData() {
        let dataDirs = this.internalConfig.dataDirs;
        let dataFiles = {};

        if (process.platform == "win32") {
            dataDirs.dataRoot = _path.join(process.env.APPDATA, "BetterRyver/");
        } else if (process.platform == "darwin") {
            dataDirs.dataRoot = _path.join(process.env.HOME, "/Library/Preferences/BetterRyver/");
        } else {
            dataDirs.dataRoot = _path.join(process.env.HOME, ".betterryver/");
        }

        dataDirs.cssDir = _path.join(dataDirs.dataRoot, "css/");
        dataDirs.pluginDir = _path.join(dataDirs.dataRoot, "plugins/");

        for (let dir in dataDirs) {
            if (!_fs.existsSync(dataDirs[dir])) {
                _fs.mkdirSync(dataDirs[dir]);
            }
        }

        dataFiles.config = "config.json";

        for (let file in dataFiles) {
            if (!_fs.existsSync(_path.join(dataDirs.dataRoot, dataFiles[file]))) {
                _fs.writeFileSync(_path.join(dataDirs.dataRoot, dataFiles[file]), _fs.readFileSync(_path.join("./resources/app/node_modules/betterryver/sampledata", dataFiles[file])));
            }
        }
    }

    loadConfig() {
        try {
            this.config = require(_path.join(this.internalConfig.dataDirs.dataRoot, "config.json"));
            this.ui.showPopup(this.ui.infoPopup("BetterRyver configuration loaded."));
        } catch (e) {
            this.internalConfig.safeMode = true;
            this.ui.showPopup(this.ui.errorPopup("BetterRyver could not load its config. Safe mode enabled. \n" + e + "\n", true));
        }
    }

    saveConfig() {
        let jsonString = JSON.stringify(this.config);
        let writeStream = _fs.createWriteStream(_path.join(this.internalConfig.dataDirs.dataRoot, "config.json"));
        writeStream.write(jsonString, "utf8", () => {
            writeStream.end();
        });
    }

    injectCSS() {
        for (let orgName in this.config.orgs) {
            let orgWebview = document.getElementById("webview_" + orgName);
            let enabledCss = this.config.orgs[orgName].enabledCss;
            if (orgWebview == null) {
                if (!(orgName == "_template")) console.log("Could not find webview_" + orgName);
                continue;
            }
            
            orgWebview.addEventListener("did-navigate", () => {
                let _this = this;
                for (let css in enabledCss) {
                    _fs.readFile(_path.join(this.internalConfig.dataDirs.cssDir, enabledCss[css]), "utf-8", (err, data) => {
                        if (err) _this.ui.showPopup(_this.ui.warnPopup(err));
                        orgWebview.insertCSS(data);
                    });
                }
            });
        }
    }

    getCurrentOrganisation() {
        let highestIndex = 0;
        let highest;
        let webviews = document.getElementsByTagName("webview");
        for (let wv of webviews) {
            let zindex = window.getComputedStyle(wv.parentNode).getPropertyValue("z-index");
            if (!isNaN(zindex)) if (parseInt(zindex) > highestIndex) {
                highestIndex = parseInt(zindex);
                highest = wv;
            }
        }
        return highest;
    }
}

class BetterRyverAPI {
    constructor(config) {
        this.internalConfig = config
    }
}